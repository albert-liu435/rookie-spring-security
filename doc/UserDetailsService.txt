UserDetailsService为加载用户信息的接口，默认实现类为InMemoryUserDetailsManager，spring security提供了默认的Bean在UserDetailsServiceAutoConfiguration进行实例化，我们可以根据自己的需要进行覆盖默认的UserDetailsService.
初始化过程为 将默认的InMemoryUserDetailsManager加入到spring容器中，然后通过org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsManagerConfigurer#configure()将userDetailsServices获取，关于InitializeUserDetailsManagerConfigurer#configure()的如何调用可以参考关于InitializeUserDetailsManagerConfigurer.txt

1、InitializeUserDetailsManagerConfigurer#configure()方法
该方法获取的userDetailsService如果为多个的话，就会取第一个，然后进行下面的流程处理,即获取PasswordEncoder和创建DaoAuthenticationProvider,关于AuthenticationProvider和PasswordEncoder详见PasswordEncoder.txt和AuthenticationProvider.txt

2、身份验证流程
org.springframework.security.web.authentication.www.BasicAuthenticationFilter#doFilterInternal()-->org.springframework.security.authentication.ProviderManager#authenticate()-->org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider#authenticate()--> org.springframework.security.authentication.dao.DaoAuthenticationProvider#retrieveUser-->org.springframework.security.provisioning.InMemoryUserDetailsManager#loadUserByUsername()

在AbstractUserDetailsAuthenticationProvider#authenticate()进行身份校验
