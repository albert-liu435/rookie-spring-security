AuthorizationManager
用来检查当前认证信息Authentication是否可以访问特定对象T。AuthorizationManager将访问决策抽象更加泛化

@FunctionalInterface
public interface AuthorizationManager<T> {

	/**
	 * 用来决定是否允许进入特定的对象T
	 */
	default void verify(Supplier<Authentication> authentication, T object) {
		AuthorizationDecision decision = check(authentication, object);
		 // 授权决策没有经过允许就403
		if (decision != null && !decision.isGranted()) {

			throw new AccessDeniedException("Access Denied");
		}
	}

	/**
	 * 钩子方法，用来检查是否有权限进入特定的对象
	 */
	@Nullable
	AuthorizationDecision check(Supplier<Authentication> authentication, T object);

}
我们只需要实现钩子方法check就可以了，它将当前提供的认证信息authentication和泛化对象T进行权限检查，并返回AuthorizationDecision，AuthorizationDecision.isGranted将决定是否能够访问当前资源



并在初始化org.springframework.security.config.annotation.web.configuration。HttpSecurityConfiguration#httpSecurity()的时候调用authenticationManager()并通过调用org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration#getAuthenticationManager()方法进行后续处理

2、getAuthenticationManager()方法
通过获取AuthenticationManagerBuilder,AuthenticationManagerBuilder的创建默认是在org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration
	@Bean
	public AuthenticationManagerBuilder authenticationManagerBuilder(ObjectPostProcessor<Object> objectPostProcessor,
			ApplicationContext context) {
		LazyPasswordEncoder defaultPasswordEncoder = new LazyPasswordEncoder(context);
		AuthenticationEventPublisher authenticationEventPublisher = getAuthenticationEventPublisher(context);
		DefaultPasswordEncoderAuthenticationManagerBuilder result = new DefaultPasswordEncoderAuthenticationManagerBuilder(
				objectPostProcessor, defaultPasswordEncoder);
		if (authenticationEventPublisher != null) {
			result.authenticationEventPublisher(authenticationEventPublisher);
		}
		return result;
	}
进行创建AuthenticationManagerBuilder，默认为DefaultPasswordEncoderAuthenticationManagerBuilder,并通过authBuilder.apply(config)将三大全局配置InitializeUserDetailsBeanManagerConfigurer,InitializeAuthenticationProviderBeanManagerConfigurer和EnableGlobalAuthenticationAutowiredConfigurer加入到AuthenticationManagerBuilder，然后通过AuthenticationManagerBuilder的doBuild()方法进行构建，紧接着调用org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder#init()方法，最终会调用InitializeUserDetailsBeanManagerConfigurer#init()方法将InitializeUserDetailsManagerConfigurer加入进去，后续调用AbstractConfiguredSecurityBuilder#configure()方法