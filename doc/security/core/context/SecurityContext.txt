SecurityContext
记住这个类是贯穿整个过滤器链的，后续一系列的认证授权都是围绕它展开的。它的实现类只有一个SecurityContextImpl，这个类从名字上可以看出它代表的是安全上下文信息，看一下SecurityContextImpl类：
内部结构很简单，只包含了一个Authentication，代表的是认证信息。

关于SecurityContext的操作主要涉及到SecurityContextHolderFilter，SecurityContextRepository和SecurityContextHolderStrategy，
我们首先看一下SecurityContextHolderFilter,而SecurityContextHolderFilter又是由SecurityContextConfigurer创建的，所以我们首先看一下SecurityContextConfigurer




public final class SecurityContextConfigurer<H extends HttpSecurityBuilder<H>>
		extends AbstractHttpConfigurer<SecurityContextConfigurer<H>, H> {

	private boolean requireExplicitSave = true;

	/**
	 * Creates a new instance
	 * @see HttpSecurity#securityContext()
	 */
	public SecurityContextConfigurer() {
	}

	/**
	 * Specifies the shared {@link SecurityContextRepository} that is to be used
	 * @param securityContextRepository the {@link SecurityContextRepository} to use
	 * @return the {@link HttpSecurity} for further customizations
	 */
	public SecurityContextConfigurer<H> securityContextRepository(SecurityContextRepository securityContextRepository) {
		getBuilder().setSharedObject(SecurityContextRepository.class, securityContextRepository);
		return this;
	}

	public SecurityContextConfigurer<H> requireExplicitSave(boolean requireExplicitSave) {
		this.requireExplicitSave = requireExplicitSave;
		return this;
	}

	boolean isRequireExplicitSave() {
		return this.requireExplicitSave;
	}

	SecurityContextRepository getSecurityContextRepository() {
		SecurityContextRepository securityContextRepository = getBuilder()
			.getSharedObject(SecurityContextRepository.class);
		if (securityContextRepository == null) {
			securityContextRepository = new DelegatingSecurityContextRepository(
					new RequestAttributeSecurityContextRepository(), new HttpSessionSecurityContextRepository());
		}
		return securityContextRepository;
	}

	@Override
	@SuppressWarnings("unchecked")
	public void configure(H http) {
	    //获取SecurityContextRepository用于持久化安全应用下上文SecurityContext
		SecurityContextRepository securityContextRepository = getSecurityContextRepository();
		//默认为true
		if (this.requireExplicitSave) {
		    //将SecurityContextRepository设置到SecurityContextHolderFilter过滤器中
			SecurityContextHolderFilter securityContextHolderFilter = postProcess(
					new SecurityContextHolderFilter(securityContextRepository));
			//设置SecurityContextHolderStrategy，默认为ThreadLocalSecurityContextHolderStrategy
			securityContextHolderFilter.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());
			http.addFilter(securityContextHolderFilter);
		}
		else {
			SecurityContextPersistenceFilter securityContextFilter = new SecurityContextPersistenceFilter(
					securityContextRepository);
			securityContextFilter.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());
			SessionManagementConfigurer<?> sessionManagement = http.getConfigurer(SessionManagementConfigurer.class);
			SessionCreationPolicy sessionCreationPolicy = (sessionManagement != null)
					? sessionManagement.getSessionCreationPolicy() : null;
			if (SessionCreationPolicy.ALWAYS == sessionCreationPolicy) {
				securityContextFilter.setForceEagerSessionCreation(true);
				http.addFilter(postProcess(new ForceEagerSessionCreationFilter()));
			}
			securityContextFilter = postProcess(securityContextFilter);
			http.addFilter(securityContextFilter);
		}
	}

}



SecurityContextHolderFilter
SecurityContextHolderFilter作用主要如下
1.一个安全上下文在某个请求处理过程中被创建并记录到SecurityContextHolder
2.请求的处理结束时，SecurityContextHolderFilter会将SecurityContextHolder中的安全上下文进行销毁
通过SecurityContextHolderFilter的这种机制，在整个请求处理过程中，开发人员都可以通过使用SecurityContextHolder获取当前访问用户的安全上下文信息。该Filter也必须在任何认证机制逻辑发生之前被调用。因为这些认证机制都依赖于SecurityContextHolder所包含的安全上下文对象。
缺省情况下，SecurityContextHolderFilter使用的SecurityContextRepository是DelegatingSecurityContextRepository，里面封装了HttpSessionSecurityContextRepository和RequestAttributeSecurityContextRepository，
看一下SecurityContextHolderFilter源码

public class SecurityContextHolderFilter extends GenericFilterBean {
    // 确保该Filter在一个request处理过程中最多被调到用一次的机制：一旦该Fitler被调用过，他会在当前request增加该属性值为true，利用此标记可以避免Filter被调用二次。
	private static final String FILTER_APPLIED = SecurityContextHolderFilter.class.getName() + ".APPLIED";
    //持久化存储安全上下文存储库
	private final SecurityContextRepository securityContextRepository;
    //持有安全上下文策略,该安全上下文策略贯穿当前请求
	private SecurityContextHolderStrategy securityContextHolderStrategy = SecurityContextHolder
		.getContextHolderStrategy();

	public SecurityContextHolderFilter(SecurityContextRepository securityContextRepository) {
		Assert.notNull(securityContextRepository, "securityContextRepository cannot be null");
		this.securityContextRepository = securityContextRepository;
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		doFilter((HttpServletRequest) request, (HttpServletResponse) response, chain);
	}

	private void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws ServletException, IOException {
		//判断该请求是否已经调用过该过滤器
		if (request.getAttribute(FILTER_APPLIED) != null) {
			chain.doFilter(request, response);
			return;
		}
		//设置该Filter已经被调用的标记
		request.setAttribute(FILTER_APPLIED, Boolean.TRUE);
		//从安全上下文存储库中读取安全上下文对象,只有在使用的时候才会执行
		Supplier<SecurityContext> deferredContext = this.securityContextRepository.loadDeferredContext(request);
		try {
		    //设置安全上下文对象到SecurityContextHolderStrategy，然后才继续Filter chain的调用
			this.securityContextHolderStrategy.setDeferredContext(deferredContext);
			chain.doFilter(request, response);
		}
		finally {
		    //当前请求已经被处理完成了,将安全上下文SecurityContext清除
			this.securityContextHolderStrategy.clearContext();
			request.removeAttribute(FILTER_APPLIED);
		}
	}

	/**
	 * Sets the {@link SecurityContextHolderStrategy} to use. The default action is to use
	 * the {@link SecurityContextHolderStrategy} stored in {@link SecurityContextHolder}.
	 *
	 * @since 5.8
	 */
	public void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {
		Assert.notNull(securityContextHolderStrategy, "securityContextHolderStrategy cannot be null");
		this.securityContextHolderStrategy = securityContextHolderStrategy;
	}

}

SecurityContextRepository
SecurityContextRepository负责安全上下文的持久，比如将其存储到redis中等等,这样我们就可以跨request请求的处理了，比如我们将一个用户第一次请求登录成功之后，我们可以生成唯一的ID和该用户的对应关系，并将其存储在SecurityContextRepository,后续我们可以通过该ID来进行请求，而不用再进行账号和M密码的登录了。当然我们也可以按照我们自己的实现，将该ID设置一个有效期
关于SecurityContextRepository的详细描述参考SecurityContextRepository.md

SecurityContextHolderStrategy
SecurityContextHolderStrategy负责从SecurityContextRepository获取安全上下文，用于将该安全上下文能够在整个请求的任何地方获取到该安全上下文


SecurityContext
SecurityContext：安全上下文，主要持有Authentication对象，如果用户未鉴权，那Authentication对象将会是空的。该示例可以通过SecurityContextHolder.getContext静态方法获取。


public interface SecurityContext extends Serializable {

	/获取鉴权对象Authentication
	Authentication getAuthentication();

	/设置鉴权对象Authentication
	void setAuthentication(Authentication authentication);

}


参考：
https://blog.csdn.net/weixin_57128596/article/details/126844394
https://blog.csdn.net/andy_zhang2007/article/details/84717438
