SecurityContextRepository
SecurityContextRepository负责安全上下文的持久化，主要应用于第一次请求账号密码验证通过后得后续多次请求得验证。在每次请求到来时，FilterChain的前排有一个SecurityContextHolderFilter，负责调用SecurityContextRepository 获取context。

源码：
public interface SecurityContextRepository {

	/**
	 * Obtains the security context for the supplied request. For an unauthenticated user,
	 * an empty context implementation should be returned. This method should not return
	 * null.
	 * <p>
	 * The use of the <tt>HttpRequestResponseHolder</tt> parameter allows implementations
	 * to return wrapped versions of the request or response (or both), allowing them to
	 * access implementation-specific state for the request. The values obtained from the
	 * holder will be passed on to the filter chain and also to the <tt>saveContext</tt>
	 * method when it is finally called to allow implicit saves of the
	 * <tt>SecurityContext</tt>. Implementations may wish to return a subclass of
	 * {@link SaveContextOnUpdateOrErrorResponseWrapper} as the response object, which
	 * guarantees that the context is persisted when an error or redirect occurs.
	 * Implementations may allow passing in the original request response to allow
	 * explicit saves.
	 * @param requestResponseHolder holder for the current request and response for which
	 * the context should be loaded.
	 * @return The security context which should be used for the current request, never
	 * null.
	 * @deprecated Use {@link #loadDeferredContext(HttpServletRequest)} instead.
	 */
	@Deprecated
	SecurityContext loadContext(HttpRequestResponseHolder requestResponseHolder);

	/**
	 * Defers loading the {@link SecurityContext} using the {@link HttpServletRequest}
	 * until it is needed by the application.
	 * @param request the {@link HttpServletRequest} to load the {@link SecurityContext}
	 * from
	 * @return a {@link DeferredSecurityContext} that returns the {@link SecurityContext}
	 * which cannot be null
	 * @since 5.8
	 */
	default DeferredSecurityContext loadDeferredContext(HttpServletRequest request) {
		Supplier<SecurityContext> supplier = () -> loadContext(new HttpRequestResponseHolder(request, null));
		return new SupplierDeferredSecurityContext(SingletonSupplier.of(supplier),
				SecurityContextHolder.getContextHolderStrategy());
	}

	/**
	 * Stores the security context on completion of a request.
	 * @param context the non-null context which was obtained from the holder.
	 * @param request
	 * @param response
	 */
	void saveContext(SecurityContext context, HttpServletRequest request, HttpServletResponse response);

	/**
	 * Allows the repository to be queried as to whether it contains a security context
	 * for the current request.
	 * @param request the current request
	 * @return true if a context is found for the request, false otherwise
	 */
	boolean containsContext(HttpServletRequest request);

}


SecurityContextRepository的默认实现类为DelegatingSecurityContextRepository，里面封装了HttpSessionSecurityContextRepository和RequestAttributeSecurityContextRepository



实现类有DelegatingSecurityContextRepository,HttpSessionSecurityContextRepository，NullSecurityContextRepository

DelegatingSecurityContextRepository:是一个委托类，里面可以封装多个SecurityContextRepository
HttpSessionSecurityContextRepository ：用于将SecurityContext与http session关联起来，从session中获取context，保证同一个session用到的都是同一个context。传统的session类型的web应用应该使用这个方式来保存context。
NullSecurityContextRepository ：新建一个。适用于无状态的应用，比如使用JWT
RequestAttributeSecurityContextRepository ：从Requst的Attribute恢复出context SecurityContextHolderFilter对应旧版本的SecurityContextPersistenceFilter （已经弃用）。



参考：https://blog.csdn.net/weixin_57128596/article/details/126844394
https://zhuanlan.zhihu.com/p/539320505
https://blog.csdn.net/sanjun333/article/details/125353212
https://docs.spring.io/spring-security/reference/servlet/authentication/persistence.html
