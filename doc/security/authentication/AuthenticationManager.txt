本文是接着上一篇的UsernamePasswordAuthenticationFilter源码分析在匹配到需要认证的请求时，内部是如何进行认证的。如果对这个过滤器不太了解，可以回头看一下它的原理。现在我们知道它最终是委托给AuthenticationManager进行认证的。从AuthenticationManager的实现类来看，它的主要实现类是ProviderManager，接下来我们着重看一下它内部的实现原理。



AuthenticationManager（接口）是认证相关的核心接口，也是发起认证的出发点，因为在实际需求中，我们可能会允许用户使用用户名+密码登录，同时允许用户使用邮箱+密码，手机号码+密码登录，甚至，可能允许用户使用指纹登录，所以说AuthenticationManager一般不直接认证，AuthenticationManager接口的常用实现类ProviderManager 内部会维护一个List<AuthenticationProvider>列表，存放多种认证方式，实际上这是委托者模式的应用（Delegate）。也就是说，核心的认证入口始终只有一个：AuthenticationManager，不同的认证方式：用户名+密码（UsernamePasswordAuthenticationToken），邮箱+密码，手机号码+密码登录则对应了三个AuthenticationProvider。其中有一个重要的实现类是ProviderManager


ProviderManager
默认情况下ProviderManager是由AuthenticationManagerBuilder构建的，而AuthenticationManagerBuilder的设置可以参考InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer#configure()
我们可以看一下 AuthenticationManagerBuilder#performBuild()方法

	@Override
	protected ProviderManager performBuild() throws Exception {
		if (!isConfigured()) {
			this.logger.debug("No authenticationProviders and no parentAuthenticationManager defined. Returning null.");
			return null;
		}
		//根据List<AuthenticationProvider>和父AuthenticationManager创建一个ProviderManager实例
		ProviderManager providerManager = new ProviderManager(this.authenticationProviders,
				this.parentAuthenticationManager);
		//用来指示在认证完成后是否擦除凭证，默认为擦除，防止凭证在后续的流程中泄漏
		if (this.eraseCredentials != null) {
			providerManager.setEraseCredentialsAfterAuthentication(this.eraseCredentials);
		}
		//设置事件的发布订阅
		if (this.eventPublisher != null) {
			providerManager.setAuthenticationEventPublisher(this.eventPublisher);
		}
		providerManager = postProcess(providerManager);
		return providerManager;
	}



AuthenticationProvider

AuthenticationProvider从上一步我们可以看出，ProviderManager本质是通过遍历AuthenticationProvider列表，逐个判断provider是否支持认证该Authentication，如果支持，则进行认证，否则继续下一个判断。
AuthenticationProvider的实现类有很多，这里只列举了一些常见的实现类，这里我们着重关注一下DaoAuthenticationProvider，因为它和上一章提到的UsernamePasswordAuthenticationFilter有着千丝万缕的关系，用户名密码令牌认证就是通过这个provider进行认证的。

public interface AuthenticationProvider {

	//进行身份验证
	Authentication authenticate(Authentication authentication) throws AuthenticationException;

	//判断AuthenticationProvider是否支持authentication的验证
	boolean supports(Class<?> authentication);

}




ProviderManager内部维护了一个AuthenticationProvider列表，每个provider只会对特定类型的Authentication令牌进行认证。
ProviderManager在进行认证时是通过遍历AuthenticationProvider列表，只要有一个provider返回结果则认为认证成功，然后返回Authentication结果，否则抛出认证失败异常。

https://www.zyc.red/Spring/Security/Spring-Security%E6%A0%B8%E5%BF%83%E8%BF%87%E6%BB%A4%E5%99%A8/AuthenticationManager/


Authentication（认证） 是验证您的身份的凭据（例如用户名/用户ID 和密码），通过这个凭据，系统得以知道你就是你，也就是说系统存在你这个用户。 所以，Authentication 被称为身份/用户验证。 Authorization（授权） 发生在Authentication（认证） 之后。

验证流程
daoauthenticationprovider.png

以UsernamePasswordAuthenticationFilter为例：

通过从请求中获取账号和密码，然后封装成UsernamePasswordAuthenticationToken，通过AuthenticationManager进行验证
在AuthenticationManager通过遍历 AuthenticationProvider 集合进行验证，本示例匹配到DaoAuthenticationProvider进行验证UsernamePasswordAuthenticationToken
DaoAuthenticationProvider 通过UserDetailsService 根据用户名查找相应的UserDetails，然后通过PasswordEncoder进行凭证的校验
认证成功后返回经校验成功后的Authentication,供后续使用
